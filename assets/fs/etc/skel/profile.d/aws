# vim: et sr sw=4 ts=4 smartindent syntax=sh:

aws_mfa_session_help() {
    cat <<EOM
usage: aws_mfa_session
... gives user authenticated session with an mfa-protected aws account
Note: profile must exist in .aws/config or .aws/credentials.
EOM
}

aws_mfa_session() {

    if [[ -z "${MFA_SERIAL}" ]]; then
        echo "Enter MFA serial e.g. arn:aws:iam::<account id>:mfa/<user-name>"
        echo "... or set MFA_SERIAL in your env, before calling aws_mfa_session:"
        read MFA_SERIAL
    else
        echo "Using serial $MFA_SERIAL"
    fi

    if [[ -z "${MFA_PROFILE}" ]]; then
        echo "Enter MFA protected profile name (must exist in your .aws creds)"
        echo "... or set MFA_PROFILE in your env, before calling aws_mfa_session:"
        read MFA_PROFILE
    else
        echo "Using profile $MFA_PROFILE"
    fi

    echo "Enter MFA code:"
    read token_code

    CREDS=$(
        aws --profile $MFA_PROFILE sts get-session-token \
            --duration-seconds 86400    \
            --serial-number $MFA_SERIAL \
            --token-code $token_code
    )

    if [[ $? -ne 0 ]]; then
        echo "ERROR: ... could not get session creds." >&2
        return 1
    fi

    unset AWS_DEFAULT_PROFILE
    export AWS_SECRET_ACCESS_KEY=$(echo $CREDS | jq -r .Credentials.SecretAccessKey)
    export AWS_ACCESS_KEY_ID=$(echo $CREDS | jq -r .Credentials.AccessKeyId)
    export AWS_SESSION_TOKEN=$(echo $CREDS | jq -r .Credentials.SessionToken)
}

aws_profile_help() {
    cat <<EOM
usage: aws_profile [<profile>] [--export]
... without params, lists available profiles in ~/.aws/credentials or config
    <profile>: sets AWS_DEFAULT_PROFILE if found in creds
    --export: export AWS region or key vars in to env
EOM
}

aws_profile() {
    local p="$1"
    local x="$2"
    local credentials_profiles=""
    local config_profiles=""
    local list=""
    if [[ -r ~/.aws/credentials ]]; then
        credentials_profiles=$(grep -Po '(?<=\[)\s*(?!default)[^\s\]]+' ~/.aws/credentials)
    fi

    if [[ -r ~/.aws/config ]]; then
        config_profiles=$(grep -Po '(?<=\[profile )(?!default)[^\s\]]+' ~/.aws/config)
    fi

    list=$(echo -e "$credentials_profiles\n$config_profiles" | sed '/^$/d' | sort | uniq)

    if [[ -z "$list" ]]; then
        echo "ERROR: no profiles defined in ~/.aws/{config,credentials} files" >&2 
        echo "(default profile is ignored)"
        return 1
    fi

    [[ -z "$p" ]] && echo -e "Available AWS profiles:\n$list" && return 0

    if ! echo "$list" | grep "^$p$" >/dev/null 2>&1 
    then
        echo "ERROR: profile $p not in ~/.aws/{config,credentials}" >&2
        return 1
    fi

    echo "Using profile $p"
    unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
    export AWS_DEFAULT_PROFILE=$p
    [[ ! -z "$x" ]] && ! _aws_profile_export "$p" && return 1

    return 0
}

_aws_profile_export() {
    echo "... export region and/or keys for $p"
    local p="$1" # profile name
    [[ -z "$p" ]] && echo "ERROR ... no profile specified! " && return 1
    local rx="^(region|aws_(access_key_id|secret_access_key))="

    local vars=$(
        cat ~/.aws/{credentials,config}                \
        | sed -n "/\[\(profile \)*$p/,/^\(\[.*\|\)$/p" \
        | grep -P "$rx"                                \
        | sort | uniq
    )

    [[ "$vars" =~ ^\ *$ ]] && echo "ERROR ... profile $p not found" && return 1

    while IFS='' read -r line || [[ -n "$line" ]]; do
        IFS== read -r k v <<<$(echo $line);
        [[ "$k" == "region" ]] && k=aws_default_region # hacked to fit recognised exported var
        export ${k^^}=$v
    done < <(echo "$vars")
}
